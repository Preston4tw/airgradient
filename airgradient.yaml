# https://www.airgradient.com/open-airgradient/shop/#!/DIY-Pro-Kit-Pre-Soldered/p/476627519/category=0
# Components
# Lolin Wemos D1 mini v4 ESP8266 https://www.wemos.cc/en/latest/d1/d1_mini.html
# SHT31 Temp/Humidity sensor https://sensirion.com/products/catalog/SHT31-DIS-B/
# SenseAir S8 CO2 sensor https://senseair.com/products/size-counts/s8-residential/
# Plantower PMS5003 PM sensor https://www.adafruit.com/product/3686

esphome:
  name: airgradient

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable native / Home Assistant API
api:
  reboot_timeout: 0s
  password: ""

# ?
i2c:
  sda: D2
  scl: D1

# Allow for wifi firmware updates
ota:
  - platform: esphome
    password: ""

# connect to wifi.ssid
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

#?
captive_portal:

# https://esphome.io/components/prometheus.html
web_server:
prometheus:

# For display?
# https://github.com/googlefonts/opensans/blob/main/fonts/ttf/OpenSans-Regular.ttf
font:
  # - file: "font/OpenSans-Regular.ttf" # weird emphasis on lowercase l and i but otherwise kind of OK
  #   id: opensans
  #   size: 12
  - file: "font/CourierPrime-Regular.ttf"
  # - file: "font/Cousine-Regular.ttf" # similar to DMMono tbh
  # - file: "font/DMMono-Regular.ttf" # wide. "ppm" looks weird, the left bar of the p is bold / emphasized vs the m looks squished / thin
  # - file: "font/Inconsolata-VariableFont_wdth,wght.ttf" # this looks squished but that it might fit more than 12 chars, not awful, but not good
  # - file: "font/RedHatMono-VariableFont_wght.ttf" # This looks ok, looks like it can fit 12 chars
  # - file: "font/SourceCodePro-VariableFont_wght.ttf" # the 2 of CO2 looks weird
    id: fnt
    size: 15

# https://esphome.io/components/display/index.html
# https://esphome.io/components/display/ssd1306.html
display:
  - platform: ssd1306_i2c
    id: oled
    model: "SH1106 128x64"
    # reset_pin: D0
    # external_vcc: true
    update_interval: 30s
    contrast: 20% # high contrast seems to cause glitchy vertical lines on the display
    rotation: "180°"
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0, id(fnt), "UPTIME:%s", id(uptime_human).state.c_str());
          it.printf(0, 15, id(fnt), "P25:%.0f CO2:%.0f", id(pm25).state, id(co2).state);
          it.printf(0, 30, id(fnt), "F:%.2f° H:%.0f%%", id(temp).state, id(humidity).state);

# it.print(0, 45, id(fnt), "last line test");

# Default Firmware does this:
# PM:N CO2:NNN
# AQI:NN TVOC:0
# F:NN.NN H:NN%

# ?
uart:
  - rx_pin: D5
    tx_pin: D6
    baud_rate: 9600
    id: uart10
    
  - rx_pin: D4
    tx_pin: D3
    baud_rate: 9600
    id: uart20

text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human

sensor:
  # https://esphome.io/components/sensor/sht3xd.html
  - platform: sht3xd
    temperature:
      filters:
        - lambda: return x * (9.0/5.0) + 32.0; # convert celsius
      unit_of_measurement: "°F"
      id: temp
      name: "Temperature"
    humidity:
      id: humidity
      name: "Humidity"
    address: 0x44
    update_interval: 30s

  - platform: pmsx003
    # type can be PMSX003, PMS5003S, PMS5003T, PMS5003ST
    # https://esphome.io/components/sensor/pmsx003.html
    type: PMSX003
    uart_id: uart10
    pm_1_0:
      id: pm10
      name: "Particulate Matter <1.0µm Concentration"
    pm_2_5:
      id: pm25
      name: "Particulate Matter <2.5µm Concentration"
    pm_10_0:
      id: pm100
      name: "Particulate Matter <10.0µm Concentration"
    update_interval: 30s

  # https://esphome.io/components/sensor/senseair.html
  - platform: senseair
    uart_id: uart20
    co2:
      id: co2
      name: "SenseAir CO2 Value"
    update_interval: 30s

  # https://esphome.io/components/sensor/uptime.html
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 30s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
